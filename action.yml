name: "Azure DevOps Commit Validator and Pull Request Linker"
description: "Enforce that each commit in a pull request has AB# in the commit message and link all of the work items to the pull request"

branding:
  icon: "user-check"
  color: "purple"

inputs:
  check-pull-request:
    description: "Check the pull request body and title for AB#xxx"
    required: true
    default: "false"
  check-commits:
    description: "Check each commit in the pull request for AB#xxx"
    required: true
    default: "true"
  fail-if-missing-workitem-commit-link:
    description: "Only if check-commits=true, fail the action if a commit in the pull request is missing AB# in every commit message"
    required: false
    default: "true"
  link-commits-to-pull-request:
    description: "Only if check-commits=true, link the work items found in commits to the pull request"
    required: false
    default: "true"
  azure-devops-token:
    description: "Only required if link-commits-to-pull-request=true, Azure DevOps Personal Access Token to link work item to PR (needs to be a full PAT)"
    required: false
  azure-devops-organization:
    description: "Only required if link-commits-to-pull-request=true, the name of the Azure DevOps organization"
    required: false
  github-token:
    description: "The GitHub token that has contents-read and pull_request-write access"
    required: true
    default: ${{ github.token }}
  comment-on-failure:
    description: "Comment on the pull request if the action fails"
    required: true
    default: "true"

runs:
  using: "composite"
  steps:
    - name: pr-workitems-validator
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        # run azdo_commit_message_validator

        # prerequisite check
        for cmd in gh jq cut grep; do
          if ! command -v $cmd &> /dev/null; then
            echo "::error title=${cmd} not installed::Could not find \`${cmd}\` on the runner"
            exit 1
          fi
        done

        # have to do some hocus pocus since this isn't a full javascript action
        main="${GITHUB_ACTION_PATH}/dist/index.js"
        echo "::debug::main.js script location: $main"

        PULL_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")

        if ${{ inputs.check-commits }}; then
          COMMITS=$(gh api --paginate ${{ github.event.pull_request.commits_url }})
          echo $COMMITS | jq -c '.[]' | while read commit; do
            COMMIT_SHA=$(echo $commit | jq '.sha')
            SHORT_COMMIT_SHA=$(echo $COMMIT_SHA | cut -c 1-7)
            COMMIT_MESSAGE=$(echo $commit | jq '.commit.message')
            echo "Validating new commit: ${COMMIT_SHA} - ${COMMIT_MESSAGE}"
            if ! echo "$COMMIT_MESSAGE" | grep -i -E -q "AB#[0-9]+"; then
                # only fail the action if the input is true
                if ${{ inputs.fail-if-missing-workitem-commit-link }}; then
                  echo ""
                  echo ""
                  echo "Pull request contains invalid commit: ${COMMIT_SHA}. This commit lacks an AB#xxx in the message, in the expected format: AB#xxx -- failing operation."
                  echo "::error title=Commit(s) not linked to work items::There is at least one commit (${SHORT_COMMIT_SHA}) in pull request #${PULL_NUMBER} that is not linked to a work item"
                  # TODO: add comment to pr
                  exit 1
                fi
            else 
              echo "valid commit"
              # set WORKITEM equal to the number after the # in the commit message
              WORKITEM=$(echo "$COMMIT_MESSAGE" | grep -i -o -E "AB#[0-9]+" | cut -c 4-)
              echo "Workitem = $WORKITEM"
              
              if ${{ inputs.link-commits-to-pull-request }}; then
                # make the call to main.js to do the linking
                # TODO: check to see if org/pat are set
                echo "Attempting to link work item ${WORKITEM} to pull request ${PULL_NUMBER}..."
                REPO_TOKEN=${{ inputs.github-token }} AZURE_DEVOPS_ORG=${{ inputs.azure-devops-organization }} AZURE_DEVOPS_PAT=${{ inputs.azure-devops-token }} WORKITEMID=$WORKITEM PULLREQUESTID=${{ github.event.number }} REPO=${{ github.repository }} node $main
                echo "...PR linked to work item"
                echo "::notice title=Work Item Linked::Work item AB#${WORKITEM} (from commit ${SHORT_COMMIT_SHA}) linked to pull request #${PULL_NUMBER}"
                echo "- Work item AB#${WORKITEM} (from commit ${SHORT_COMMIT_SHA}) linked to pull request #${PULL_NUMBER}" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          fi

          if ${{ inputs.check-pull-request }}; then
            PULL_REQUEST=$(gh api ${{ github.event.pull_request.url }})
            PULL_BODY=$(echo $PULL_REQUEST | jq --raw-output .body)
            PULL_TITLE=$(echo $PULL_REQUEST | jq --raw-output .title)
            if ! echo "$PULL_TITLE $PULL_BODY" | grep -i -E -q "AB#[0-9]+"; then
              echo "PR not linked to a work item"
              echo "::error title=Pull Request not linked to work item(s)::The pull request #${PULL_NUMBER} is not linked to any work item(s)"

              COMMENT=":x: This pull request is not linked to a work item. Please update the title or body to include a work item and re-run the failed job to continue. Any new commits to the pull request will also re-run the job."
              CURRENT_DATE_TIME=$(date +"%Y-%m-%d %T")
              COMMENT_EXTRA=$'\n\n[View workflow run for details](${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt}}) _(last ran\: '${CURRENT_DATE_TIME}')_'
              COMMENT_COMBINED="${COMMENT}${COMMENT_EXTRA}"
              COMMENTS_CLEAN=$(gh api --paginate ${{ github.event.pull_request.comments_url }} | tr -d '\000-\031')
              COMMENT_ID=$(echo "$COMMENTS_CLEAN" | jq -r --arg comment "$COMMENT" '.[] | select(.body | contains($comment)) | .id')
              echo "Comment ID(s): $COMMENT_ID"
              # Check if the comment already exists
              if [ -n "$COMMENT_ID" ]; then
                echo "Comment already exists: $COMMENT_ID"
                # Edit the comment
                echo "... attempting to update the PR comment"
                gh api ${{ github.event.repository.url }}/issues/comments/${COMMENT_ID} --method PATCH --field body="${COMMENT_COMBINED}" > /dev/null
                echo "... PR comment updated"
              else
                echo "Comment does not exist. Posting a new comment."
                gh pr comment $PULL_NUMBER --body "${COMMENT_COMBINED}"
              fi
              exit 1
            else
              echo "PR linked to work item"
              # TODO: do we want to update or delete the PR comment if it exists b/c previously failed? 

              # Extract work items from PR body and title
              WORKITEMS=$(echo "$PULL_BODY $PULL_TITLE" | grep -i -o -E "AB#[0-9]+" | sort | uniq)
            
              # Loop through each work item
              for WORKITEM in $WORKITEMS; do
                # Remove the "AB#" or "ab#" prefix and keep only the number
                WORKITEM_NUMBER=${WORKITEM:3}

                echo "Pull request linked to work item number: $WORKITEM_NUMBER"
                echo "::notice title=Work Item Linked::Pull request linked to work item AB#${WORKITEM_NUMBER}"
                echo "- Pull request #${PULL_NUMBER} linked to work item AB#${WORKITEM_NUMBER}" >> $GITHUB_STEP_SUMMARY
              done
            fi
          fi
