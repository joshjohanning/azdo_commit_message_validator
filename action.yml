name: 'Azure DevOps Commit Validator and Pull Request Linker'
description: 'Enforce that each commit in a pull request has AB# in the commit message and link all of the work items to the pull request'

branding:
  icon: "user-check"
  color: "purple"

inputs:
  github-token:
    description: "The GitHub token that has contents-read and pull_request-write access"
    required: true
    default: ${{ github.token }}
  check-pull-request:
    description: "Check the pull request body and title for AB#xxx"
    required: true
    default: false
  check-commits:
    description: "Check each commit in the pull request for AB#xxx"
    required: true
    default: true
  fail-if-missing-workitem-commit-link:
    description: "Fail the action if a commit in the pull request is missing AB# in every commit message"
    required: true
    default: true
  link-commits-to-pull-request:
    description: "Only if check-commits=true; link the work items found in commits to the pull request"
    required: true
    default: true
  azure-devops-token:
    description: "Only required if link-commits-to-pull-request=true; Azure DevOps Personal Access Token to link work item to PR (needs to be a full PAT)"
    required: false
  azure-devops-organization:
    description: "Only required if link-commits-to-pull-request=true; the name of the Azure DevOps organization"
    required: false
# TODO: customize error message pr comment
# TODO: validate work item
# TODO: should `fail-if-missing-workitem-commit-link` be `fail-if-missing-workitem-link`; make it so this is 1 flag for both PR and commits?

runs:
  using: "composite"
  steps:
    - name: pr-workitems-validator
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        # run azdo_commit_message_validator

        # TODO: if both ${{ inputs.check-commits }} and ${{ inputs.check-pull-request }} are false, then fail the action
        
        # TODO: check if work item is valid (but will require AZDO PAT)

        # have to do some hocus pocus since this isn't a full javascript action
        main=$(find ../../_actions/joshjohanning/azdo_commit_message_validator -name "main.js" | grep -v "node_modules")
        echo "::debug::main.js script location: $main"

        PULL_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")

        if ${{ inputs.check-commits }}; then
          COMMITS=$(curl -s -H 'Authorization: Bearer ${{ inputs.github-token }}' -H "Accept: application/vnd.github.v3+json" "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${PULL_NUMBER}/commits")
          echo $COMMITS | jq -c '.[]' | while read commit; do
            COMMIT_SHA=$(echo $commit | jq '.sha')
            COMMIT_MESSAGE=$(echo $commit | jq '.commit.message')
            echo "Validating new commit: ${COMMIT_SHA} - ${COMMIT_MESSAGE}"
            # TODO: use grep and filter out the duplicates
            if [[ "$COMMIT_MESSAGE" != *"AB"\#""[0-9]""* ]] && [[ "$COMMIT_MESSAGE" != *"ab"\#""[0-9]""* ]]; then
                # only fail the action if the input is true
                if ${{ inputs.fail-if-missing-workitem-commit-link }}; then
                  echo ""
                  echo ""
                  # TODO: better error message (see below)
                  echo "Pull request contains invalid commit: ${COMMIT_SHA}. This commit lacks an AB#xxx in the message, in the expected format: AB#xxx -- failing operation."
                  exit 1
                fi
            else 
              echo "valid commit"
              # set WORKITEM equal to the number after the # in the commit message
              WORKITEM=$(echo "$PULL_BODY $PULL_TITLE" | grep -i -o -E "AB#[0-9]+")
              echo "Workitem = $WORKITEM"
              
              if ${{ inputs.link-commits-to-pull-request }}; then
                # make the call to main.js to do the linking
                # TODO: check to see if org/pat are set
                REPO_TOKEN=${{ inputs.github-token }} AZURE_DEVOPS_ORG=${{ inputs.azure-devops-organization }} AZURE_DEVOPS_PAT=${{ inputs.azure-devops-token }} WORKITEMID=$WORKITEM PULLREQUESTID=${{ github.event.number }} REPO=${{ github.repository }} node $main
              fi
            fi
          done
          fi

          if ${{ inputs.check-pull-request }}; then
            # TODO: we should retrieve this using the API so ppl don't have to do an empty commit
            PULL_BODY=$(jq --raw-output .pull_request.body "$GITHUB_EVENT_PATH")
            PULL_TITLE=$(jq --raw-output .pull_request.title "$GITHUB_EVENT_PATH")
            if ! echo "$PULL_TITLE $PULL_BODY" | grep -i -E -q "AB#[0-9]+"; then
              echo "PR not linked to a work item"
              gh pr comment $PULL_NUMBER --body $'This pull request is not linked to a work item. Please update the title or body to include a work item and make a new commit to re-run this check. You can create an empty commit and push with the following commands to re-run:\n\n ```\ngit commit --allow-empty -m \'linking pull request to work item\'\ngit push\n```'
              echo "::error title=PR not linked to work item(s)::The pull request is not linked to any work item(s)"
              exit 1
            else
              echo "PR linked to work item"

              # Extract work items from PR body and title
              WORKITEMS=$(echo "$PULL_BODY $PULL_TITLE" | grep -i -o -E "AB#[0-9]+" | sort | uniq)
            
              # Loop through each work item
              for WORKITEM in $WORKITEMS; do
                # Remove the "AB#" or "ab#" prefix and keep only the number
                WORKITEM_NUMBER=${WORKITEM:3}

                echo "Pull request linked to work item number: $WORKITEM_NUMBER"
                # TODO: validate work item?
                # TODO: add this as an ::info or to the job summary?
              done
            fi
          fi
